#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class codeLanguage(object):
    Cpp = 0
    Java = 1

    _VALUES_TO_NAMES = {
        0: "Cpp",
        1: "Java",
    }

    _NAMES_TO_VALUES = {
        "Cpp": 0,
        "Java": 1,
    }


class resultType(object):
    Sucess = 0
    Compile_Error = 1
    Runtime_Error = 2
    Time_Limit_Exceeded = 3
    Memory_Limit_Exceeded = 4
    System_Error = 5

    _VALUES_TO_NAMES = {
        0: "Sucess",
        1: "Compile_Error",
        2: "Runtime_Error",
        3: "Time_Limit_Exceeded",
        4: "Memory_Limit_Exceeded",
        5: "System_Error",
    }

    _NAMES_TO_VALUES = {
        "Sucess": 0,
        "Compile_Error": 1,
        "Runtime_Error": 2,
        "Time_Limit_Exceeded": 3,
        "Memory_Limit_Exceeded": 4,
        "System_Error": 5,
    }


class codeRunnerRequest(object):
    """
    Attributes:
     - language_
     - code_
     - input_

    """


    def __init__(self, language_=None, code_=None, input_=None,):
        self.language_ = language_
        self.code_ = code_
        self.input_ = input_

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.language_ = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code_ = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.input_ = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('codeRunnerRequest')
        if self.language_ is not None:
            oprot.writeFieldBegin('language_', TType.I32, 1)
            oprot.writeI32(self.language_)
            oprot.writeFieldEnd()
        if self.code_ is not None:
            oprot.writeFieldBegin('code_', TType.STRING, 2)
            oprot.writeString(self.code_.encode('utf-8') if sys.version_info[0] == 2 else self.code_)
            oprot.writeFieldEnd()
        if self.input_ is not None:
            oprot.writeFieldBegin('input_', TType.STRING, 3)
            oprot.writeString(self.input_.encode('utf-8') if sys.version_info[0] == 2 else self.input_)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class codeRunnerRespone(object):
    """
    Attributes:
     - type_
     - result_

    """


    def __init__(self, type_=None, result_=None,):
        self.type_ = type_
        self.result_ = result_

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type_ = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.result_ = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('codeRunnerRespone')
        if self.type_ is not None:
            oprot.writeFieldBegin('type_', TType.I32, 1)
            oprot.writeI32(self.type_)
            oprot.writeFieldEnd()
        if self.result_ is not None:
            oprot.writeFieldBegin('result_', TType.STRING, 2)
            oprot.writeString(self.result_.encode('utf-8') if sys.version_info[0] == 2 else self.result_)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(codeRunnerRequest)
codeRunnerRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'language_', None, None, ),  # 1
    (2, TType.STRING, 'code_', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'input_', 'UTF8', None, ),  # 3
)
all_structs.append(codeRunnerRespone)
codeRunnerRespone.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type_', None, None, ),  # 1
    (2, TType.STRING, 'result_', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
